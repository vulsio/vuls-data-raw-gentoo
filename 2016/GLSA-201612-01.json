{
  "ID": "201612-01",
  "Title": "GnuPG: RNG output is predictable",
  "Synopsis": "Due to a design flaw, the output of GnuPG's Random Number Generator\n    (RNG) is predictable.\n  ",
  "Product": {
    "Text": "gnupg",
    "Type": "ebuild"
  },
  "Announced": "2016-12-02",
  "Revised": {
    "Text": "2016-12-02",
    "Count": "1"
  },
  "Bug": [
    "591536"
  ],
  "Access": "local",
  "Affected": {
    "Package": [
      {
        "Name": "app-crypt/gnupg",
        "Auto": "yes",
        "Arch": "*",
        "Unaffected": [
          {
            "Text": "1.4.21",
            "Range": "ge",
            "Slot": ""
          }
        ],
        "Vulnerable": [
          {
            "Text": "1.4.21",
            "Range": "lt",
            "Slot": ""
          }
        ]
      }
    ],
    "Service": {
      "Text": "",
      "Type": "",
      "Fixed": ""
    }
  },
  "Background": {
    "Text": "\n    <p>The GNU Privacy Guard, GnuPG, is a free replacement for the PGP suite of\n      cryptographic software.\n    </p>\n  "
  },
  "Description": {
    "Text": "\n    <p>A long standing bug (since 1998) in Libgcrypt (see “GLSA 201610-04”\n      below) and GnuPG allows an attacker to predict the output from the\n      standard RNG. Please review the “Entropy Loss and Output Predictability\n      in the Libgcrypt PRNG” paper below for a deep technical analysis.\n    </p>\n  "
  },
  "Impact": {
    "Type": "normal",
    "Text": "\n    <p>An attacker who obtains 580 bytes of the random number from the standard\n      RNG can trivially predict the next 20 bytes of output.\n    </p>\n    \n    <p>This flaw does not affect the default generation of keys, because\n      running gpg for key creation creates at most 2 keys from the pool. For a\n      single 4096 bit RSA key, 512 bytes of random are required and thus for\n      the second key (encryption subkey), 20 bytes could be predicted from the\n      the first key.\n    </p>\n    \n    <p>However, the security of an OpenPGP key depends on the primary key\n      (which was generated first) and thus the 20 predictable bytes should not\n      be a problem.  For the default key length of 2048 bit nothing will be\n      predictable.\n    </p>\n  "
  },
  "Workaround": {
    "Text": "\n    <p>There is no known workaround at this time.</p>\n  "
  },
  "Resolution": {
    "Text": "\n    \n    \n    \n    \n  ",
    "P": [
      {
        "Text": "All GnuPG 1 users should upgrade to the latest version:",
        "URI": {
          "Text": "",
          "Link": ""
        },
        "Br": null,
        "I": null,
        "Code": "",
        "P": ""
      }
    ],
    "Code": [
      "\n      # emerge --sync\n      # emerge --ask --oneshot --verbose \">=app-crypt/gnupg-1.4.21\"\n    "
    ]
  },
  "References": {
    "URI": [
      {
        "Text": "CVE-2016-6313",
        "Link": "https://nvd.nist.gov/nvd.cfm?cvename=CVE-2016-6313"
      },
      {
        "Text": "\n      Entropy Loss and Output Predictability in the Libgcrypt PRNG\n    ",
        "Link": "http://formal.iti.kit.edu/~klebanov/pubs/libgcrypt-cve-2016-6313.pdf"
      },
      {
        "Text": "GLSA 201610-04",
        "Link": "https://security.gentoo.org/glsa/201610-04"
      }
    ]
  },
  "Metadata": [
    {
      "Text": "whissi",
      "Tag": "requester",
      "Timestamp": "2016-11-30T18:28:25Z"
    },
    {
      "Text": "whissi",
      "Tag": "submitter",
      "Timestamp": "2016-12-02T09:38:37Z"
    }
  ]
}
